;;; package --- Emacs init file
;;; author --- jack
;;; Commentary:
;;; 
;;; 
;;; 
;;; Code:


(setq user-full-name "Pierre Jackman"
      user-login-name "jack"
      user-mail-address "jackman.pierre@gmail.com")

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(setq scroll-conservatively 10000
      scroll-preserve-screen-position t)

(transient-mark-mode 1)
(when (functionp 'menu-bar-mode)
  (menu-bar-mode -1))

(line-number-mode 1)
(column-number-mode 1)
(setq line-move-visual t)
(setq make-pointer-invisible t)
(setq-default fill-column 80)
(setenv "PAGER" "cat")

(global-set-key (kbd "C-c \\") 'query-replace)

(setq-default tab-stop-list (number-sequence 4 120 4))

;; -----------------------------------------------------------------------------
;; PACKAGES
;; -----------------------------------------------------------------------------
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

(add-to-list 'load-path "/home/jack/.emacs.d/local/")
(add-to-list 'load-path "/home/jack/.emacs.d/local/emacs-async/")
(add-to-list 'load-path "/home/jack/.emacs.d/local/helm/")

;; -----------------------------------------------------------------------------
;; THEME
;; -----------------------------------------------------------------------------
(require 'color-theme-sanityinc-tomorrow)

(load-theme 'sanityinc-tomorrow-night t)
;; (require 'moe-theme)
;; (load-theme 'toxi t)
;; (load-theme 'firecode t) ;; Main theme
;; (load-theme 'molokai t)
;; (load-theme 'hipster t)
;; (load-theme 'monokai t)
;; (load-theme 'atom-dark t)
;; (load-theme 'zenburn t)
;; (load-theme 'moe-dark t)
;; (moe-dark)

(require 'smart-mode-line)
(setq sml/no-confirm-load-theme t)
(sml/setup) ;; Smart mode line

(require 'hlinum)
(hlinum-activate)

(require 'git-gutter)
(global-git-gutter-mode t)
(git-gutter:linum-setup)
(global-set-key (kbd "C-c v") 'git-gutter:stage-hunk)

(require 'highlight-indentation)
(add-hook 'python-mode-hook 'highlight-indentation-mode)
(set-face-background 'highlight-indentation-face "#2d2d2d")
;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")

;; -----------------------------------------------------------------------------
;; UTILITIES
;; -----------------------------------------------------------------------------

(setq-default indent-tabs-mode nil)

(require 'linum)
(require 'linum-off)
(setq linum-format "%4d ")
(global-linum-mode 1)

(require 'highlight-current-line)
(highlight-current-line-on t)
(set-face-background 'highlight-current-line-face "#151515")


;; (require 'smooth-scrolling)
;; (smooth-scrolling-mode 1)


(require 'smartparens)
(require 'smartparens-config)
(add-hook 'prog-mode-hook 'turn-on-smartparens-mode)

(global-highlight-parentheses-mode t)

(require 'neotree)
(global-set-key (kbd "M-Ã¹") 'neotree-toggle)


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(col-highlight ((t (:background "blue"))))
 '(company-preview ((t (:background "#303030" :foreground "#FFFFFF"))))
 '(company-preview-common ((t (:background nil :foreground "#FFFFFF"))))
 '(company-scrollbar-bg ((t (:background "#353535"))))
 '(company-scrollbar-fg ((t (:background "yellow"))))
 '(company-tooltip ((t (:background "#303030" :foreground "#FFFFFF"))))
 '(company-tooltip-annotation ((t nil)))
 '(company-tooltip-common ((t (:foreground "#FFFFFF" :background "#303030" :underline nil))))
 '(company-tooltip-common-selection ((t (:foreground "#FF1493" :background "#303030" :underline nil :weight bold))))
 '(company-tooltip-mouse ((t nil)))
 '(company-tooltip-selection ((t (:foreground "#FF1493" :background "#303030" :underline nil :weight bold))))
 '(flycheck-error ((t (:foreground "red" :weight bold :underline nil :background nil))))
 '(flycheck-info ((t (:foreground "green" :weight bold :underline nil))))
 '(flycheck-warning ((t (:foreground "orange" :weight bold :underline nil :background nil))))
 '(helm-ff-directory ((t (:foreground "brightblue"))))
 '(helm-ff-dotted-directory ((t (:foreground "brightblue"))))
 '(helm-ff-invalid-symlink ((t (:foreground "red" :slant italic))))
 '(helm-match ((t (:foreground "blue" :background nil))))
 '(helm-selection ((t (:background "#303030" :foreground "blue" :underline nil :weight bold))))
 '(helm-selection-line ((t (:background "#303030" :foreground "blue" :underline nil))))
 '(helm-source-header ((t (:background "#1A1A1A" :foreground "#FF8C00" :underline nil :weight bold))))
 '(idle-highlight ((t (:foreground "blue" :weight extra-bold))))
 '(lazy-highlight ((t (:background "black" :foreground "white" :underline t))))
 '(neo-dir-link-face ((t (:foreground "brightblue" :weight bold))))
 '(neo-file-link-face ((t (:foreground "white"))))
 '(neo-header-face ((t (:foreground "#FF1493" :weight bold))))
 '(neo-root-dir-face ((t (:foreground "#FF1493" :weight bold)))))


(require 'helm)
(require 'helm-config)
(require 'helm-swoop)

(global-set-key (kbd "C-s") 'helm-swoop)
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "C-x y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c f") 'helm-projectile-grep)
(global-set-key (kbd "C-x t") 'helm-etags-select)
;; C-x d open folder helm
(helm-mode 1)
(helm-autoresize-mode 1)
(setq helm-autoresize-max-height 30)
(setq helm-autoresize-min-height 30)
(setq helm-split-window-in-side-p t)
(helm-adaptive-mode 1)


(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq flycheck-highlighting-mode 'lines)
(define-key flycheck-mode-map (kbd "C-c ]") #'flycheck-next-error)
(define-key flycheck-mode-map (kbd "C-c [") #'flycheck-previous-error)
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c l") 'helm-flycheck))


(require 'projectile)
(require 'helm-projectile)
(projectile-global-mode)
(helm-projectile-on)
(setq projectile-completion-system 'helm)
(setq projectile-switch-project-action 'helm-projectile-all-dired-buffers)

(add-hook 'prog-mode-hook (lambda () (idle-highlight-mode t)))

(add-hook 'python-mode-hook
          (lambda()
            (local-set-key (kbd "C-c +") 'hs-show-block)
            (local-set-key (kbd "C-c -") 'hs-hide-block)
            (local-set-key (kbd "C-c RET") 'hs-toggle-hiding)
            (local-set-key (kbd "C-c *") 'hs-hide-all)
            (hs-minor-mode t)))

 ;; -----------------------------------------------------------------------------
 ;; Buffers
 ;; -----------------------------------------------------------------------------

;; STARTUP


(defun next-code-buffer (buffer-scroll-func)
  "Only scroll through BUFFER-SCROLL-FUNC selected buffers."
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (funcall buffer-scroll-func)
    (while
	(and
	 (string-match-p "^\*" (buffer-name))
	 (not ( equal bread-crumb (buffer-name) )) )
      (funcall buffer-scroll-func))))


(defun my-next-buffer ()
  "Switch to next relevant buffer."
  (interactive)
  (next-code-buffer 'next-buffer))

(defun my-previous-buffer ()
  "Doc."
  (interactive)
  (next-code-buffer 'previous-buffer))

(global-set-key [remap next-buffer] 'my-next-buffer)
(global-set-key [remap previous-buffer] 'my-previous-buffer)

;; -----------------------------------------------------------------------------
;; Autocompletion
;; -----------------------------------------------------------------------------
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(add-to-list 'company-backends 'company-jedi)

;; (define-key company-mode-map [remap indent-for-tab-command]
;;   'company-indent-for-tab-command)

;; (setq tab-always-indent 'complete)
;; (defvar completion-at-point-functions-saved nil)

;; (defun company-indent-for-tab-command (&optional arg)
;;   (interactive "P")
;;   (let ((completion-at-point-functions-saved completion-at-point-functions)
;; 	(completion-at-point-functions '(company-complete-common-wrapper)))
;;     (indent-for-tab-command arg)))

;; (defun company-complete-common-wrapper ()
;;   (let ((completion-at-point-functions completion-at-point-functions-saved))
;;     (company-complete-common)))

(setq c-default-style "linux" c-basic-offset 4)

;; -----------------------------------------------------------------------------
;; Python
;; -----------------------------------------------------------------------------
(require 'virtualenvwrapper)
;; (add-hook 'python-mode-hook 'anaconda-mode)
(venv-initialize-interactive-shells)
(venv-initialize-eshell)
(setq venv-location "/home/jack/.virtualenvs/")

(add-hook 'python-mode-hook 'my-python-mode-hook)
(defun my-python-mode-hook ()
  "Set .local-dir variables for virtualenvs and current PYTHONPATH."
  (hack-local-variables)
  (when (boundp 'project-venv-name)
    (venv-workon project-venv-name)))


(setq nxml-child-indent 4)

;; (setq tab-stop-list nil)

;; (add-hook 'python-mode-hook '(lambda ()
;;                                (define-key python-mode-map (kbd "<tab>") 'python-indent-shift-right)
;;                                (define-key python-mode-map (kbd "S-<tab>") 'python-indent-shift-left)))

;; -----------------------------------------------------------------------------
;; Web JS/HTML/CSS
;; -----------------------------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js2-mode-hook #'flycheck-mode)
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(defun my-web-mode-hook ()
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (seirtq web-mode-enable-current-element-highlight t)
  (setq tab-always-indent nil)
  )

(add-hook 'web-mode-hook 'my-web-mode-hook)
;; (setq web-mode-enable-current-column-highlight t)


;; ----------------------------------------------------------------------------
;; MARKDOWN
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; -----------------------------------------------------------------------------
;; CUSTOM FACES
;; -----------------------------------------------------------------------------


;; handle tmux's xterm-keys
;; put the following line in your ~/.tmux.conf:
;;   setw -g xterm-keys on
(if (getenv "TMUX")
    (progn
      (let ((x 2) (tkey ""))
        (while (<= x 8)
          ;; shift
          (if (= x 2)
              (setq tkey "S-"))
          ;; alt
          (if (= x 3)
              (setq tkey "M-"))
          ;; alt + shift
          (if (= x 4)
              (setq tkey "M-S-"))
          ;; ctrl
          (if (= x 5)
              (setq tkey "C-"))
          ;; ctrl + shift
          (if (= x 6)
              (setq tkey "C-S-"))
          ;; ctrl + alt
          (if (= x 7)
              (setq tkey "C-M-"))
          ;; ctrl + alt + shift
          (if (= x 8)
              (setq tkey "C-M-S-"))

          ;; arrows
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d A" x)) (kbd (format "%s<up>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d B" x)) (kbd (format "%s<down>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d C" x)) (kbd (format "%s<right>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d D" x)) (kbd (format "%s<left>" tkey)))
          ;; home
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d H" x)) (kbd (format "%s<home>" tkey)))
          ;; end
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d F" x)) (kbd (format "%s<end>" tkey)))
          ;; page up
          (define-key key-translation-map (kbd (format "M-[ 5 ; %d ~" x)) (kbd (format "%s<prior>" tkey)))
          ;; page down
          (define-key key-translation-map (kbd (format "M-[ 6 ; %d ~" x)) (kbd (format "%s<next>" tkey)))
          ;; insert
          (define-key key-translation-map (kbd (format "M-[ 2 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
          ;; delete
          (define-key key-translation-map (kbd (format "M-[ 3 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
          ;; f1
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d P" x)) (kbd (format "%s<f1>" tkey)))
          ;; f2
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d Q" x)) (kbd (format "%s<f2>" tkey)))
          ;; f3
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d R" x)) (kbd (format "%s<f3>" tkey)))
          ;; f4
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d S" x)) (kbd (format "%s<f4>" tkey)))
          ;; f5
          (define-key key-translation-map (kbd (format "M-[ 15 ; %d ~" x)) (kbd (format "%s<f5>" tkey)))
          ;; f6
          (define-key key-translation-map (kbd (format "M-[ 17 ; %d ~" x)) (kbd (format "%s<f6>" tkey)))
          ;; f7
          (define-key key-translation-map (kbd (format "M-[ 18 ; %d ~" x)) (kbd (format "%s<f7>" tkey)))
          ;; f8
          (define-key key-translation-map (kbd (format "M-[ 19 ; %d ~" x)) (kbd (format "%s<f8>" tkey)))
          ;; f9
          (define-key key-translation-map (kbd (format "M-[ 20 ; %d ~" x)) (kbd (format "%s<f9>" tkey)))
          ;; f10
          (define-key key-translation-map (kbd (format "M-[ 21 ; %d ~" x)) (kbd (format "%s<f10>" tkey)))
          ;; f11
          (define-key key-translation-map (kbd (format "M-[ 23 ; %d ~" x)) (kbd (format "%s<f11>" tkey)))
          ;; f12
          (define-key key-translation-map (kbd (format "M-[ 24 ; %d ~" x)) (kbd (format "%s<f12>" tkey)))
          ;; f13
          (define-key key-translation-map (kbd (format "M-[ 25 ; %d ~" x)) (kbd (format "%s<f13>" tkey)))
          ;; f14
          (define-key key-translation-map (kbd (format "M-[ 26 ; %d ~" x)) (kbd (format "%s<f14>" tkey)))
          ;; f15
          (define-key key-translation-map (kbd (format "M-[ 28 ; %d ~" x)) (kbd (format "%s<f15>" tkey)))
          ;; f16
          (define-key key-translation-map (kbd (format "M-[ 29 ; %d ~" x)) (kbd (format "%s<f16>" tkey)))
          ;; f17
          (define-key key-translation-map (kbd (format "M-[ 31 ; %d ~" x)) (kbd (format "%s<f17>" tkey)))
          ;; f18
          (define-key key-translation-map (kbd (format "M-[ 32 ; %d ~" x)) (kbd (format "%s<f18>" tkey)))
          ;; f19
          (define-key key-translation-map (kbd (format "M-[ 33 ; %d ~" x)) (kbd (format "%s<f19>" tkey)))
          ;; f20
          (define-key key-translation-map (kbd (format "M-[ 34 ; %d ~" x)) (kbd (format "%s<f20>" tkey)))

          (setq x (+ x 1))
          ))
      )
  )




(provide '.emacs)
;;; .emacs ends here
